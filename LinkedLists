import java.util.LinkedHashSet;
import java.util.NoSuchElementException;

import javax.xml.soap.Node;

public class LinkedList {
	
	Node head;
	int size;

 
 public LinkedList()
 {
	 size = 0;
	 this.head = null;
	 
 }
 
 public void add(char c)
 {
	 if (this.size == 0)
	 {
		 this.head = new Node(c);
	 }else
	 {
		  LinkedList.add(c, this.head);
	 }
	 this.size++;
 }
 
 public static void add(char c, Node node)
 {
	 if(node.next == null)
	 {
		 node.next = new Node(c);
	 }else{
		 LinkedList.add(c, node.next);
	 }
 }
 
 public char get(int index)
 {
  if (index < 0 || index >= this.size)
 {
  throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + this.size);
  }
  return LinkedList.get(index, this.head);
 }
 
 public static char get(int index, Node node)
 {
	if (index == 0)
	{
		return node.data;
	}
	return LinkedList.get(index-1, node.next);
 }
 public void set(int index, char c)
 {
	 if (index < 0 || index >= this.size)
	 {
		 throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + this.size);
	 }
	 LinkedList.set(index, c, this.head);
 }
 
 public static void set (int index, char c , Node node)
 {
	 if (index ==0)
	 {
		 node.data = c;
		 return;
	 }
	 
	 LinkedList.set(index-1, c, node.next);
 }
 
 public String toString()
 {
	 if(this.size == 0)
	 {
		 return"[]";
	 }
	 return "[ " + LinkedList.toString(this.head);
 }
 
 public static String toString(Node node)
 {
	if (node.next == null) 
	{
		return node.data + "]";
	}
	String s = node.data + " , ";
	return s + LinkedList.toString(node.next);
 }
 
 public boolean contains(char c)
 {
	 if (this.size == 0)
	 {
		 return false;
	 }
	 return LinkedList.contains(c, this.head);
 }
 
 public static boolean contains(char c, Node node)
 {
	 if (node.data == c)
	 {
		 return true;
	 }else if (node.next == null)
	 {
		 return false;
	 }
	 return LinkedList.contains(c, node.next);
 }
 
 public int indexof(char c)
 {
	 if (this.size == 0)
	 {
		 return -1;
	 }
	 
	 return LinkedList.indexof(c, this.head);
 }
 
 public static int indexof(char c, Node node)
 {
	 if (node.data == c)
	 {
		 return 0;
	 }
	 if (node.next == null)
	 {
		 return -1;
	 }
	 int i = LinkedList.indexof(c, node.next);
	if (i == -1)
	{
		return -1;
	}
	 return 1+ i;
 }
 // adding an element in at the front
 public void addFirst(char c)
 {
	 Node newNode = new Node(c);
	 newNode.next = this.head;
	 this.head = newNode;
	 this.size++;
 }
 // inserting an element in the middle
 private static void add(int index, char c, Node prev)
 {
  if (index == 0)
 {
  Node newNode = new Node(c);
  newNode.next = prev.next;
  prev.next = newNode;
  return;
  }
  LinkedList.add(index - 1, c, prev.next);
 }
 public void add (int index, char c)
 {
	 if (index < 0 || index > this.size)
	 {
	  throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + this.size);
	  }
	  if (index == 0)
	 {
	  this.addFirst(c);
	  }
	  else 
	  {
		  LinkedList.add(index -1, c, this.head);
		  this.size++;
	  }
 }
 
 public char removeFirst()
 {
  if (this.size == 0)
 {
  throw new NoSuchElementException();
  }
  Node curr = this.head;
  this.head = curr.next;
  curr.next = null;
  this.size--;
  return curr.data;
 }
 
 private static char remove(int index, Node prev, Node curr)
 {
  if (index == 0)
 {
  prev.next = curr.next;
  curr.next = null;
  return curr.data;
  }
  return LinkedList.remove(index - 1, curr, curr.next);
 }
 
 public char remove(int index)
 {
  if (index < 0 || index >= this.size)
 {
  throw new IndexOutOfBoundsException("Index: " + index + ", Size: " + this.size);
  }
  if (index == 0)
 {
  return this.removeFirst();
  }
  else
 {
  char result = LinkedList.remove(index - 1, this.head, this.head.next);
  this.size--;
  return result;
 }
 }
 //the Node Class//
 private static class Node {
	 
 private char data;
 private Node next;
 
 public Node(char c)

 	{
	this.data = c;
 	this.next = null;

	}

 }
}
